version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    env_file: .env
    command: postgres -c 'max_connections=1000'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/certs:/etc/nginx/certs
    depends_on:
      - main_service
      - frontend
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - ./config/rabbit/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--save", "''", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - app_network

  main_service:
    build: ./main_service
    env_file: .env
    environment:
      - POSTGRES_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - app_network

  run_service:
    build: ./run_service
    env_file: .env
    environment:
      - POSTGRES_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - app_network

  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
